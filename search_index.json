[
["index.html", "Reproducible Research in R Reproducible Research in R Learning outcomes Workshop description Prerequisite Keywords Schedule Authors and copyright", " Reproducible Research in R 2019-07-21 Reproducible Research in R Level: beginner-intermediate Duration: 6 hours Student numbers: 25-30 Welcome to the Reproducible Research in R (RRR) workshop. The main aim of this workshop is to set you on the right path of making your research more reproducible and shariable. Reproducible research means that future you and anyone else will be able to pick up your analysis and reproduce the same results including figures and tables. Reproducible research also implies well documented reasearch, your code should be well commented and the reasons behind functions and methods should be well explained through out the analysis. The communication aspect should not be after thought, is should stay with your analysis as you are going through it. Rmarkdown is a way of literal programing that keeps code and words and sentences together. The other important aspect that goes hand and hand with reproducibility is ability to easily collaborate and share your analysis. We are going to repurpose git version cotrol tool and leverage GitHub remote hosting provider for managing and sharining our work. Git + GitHub will provide very powerful way for global collaboration and exposure of your work. In this workshop we are going to verstion control our work and push it to github, which can then be accessible by your collaborators and supervisors. Git + GitHub should become integral part of your workflow. The RRR course given by the Monash Bioinformatics Platform for the Monash Data Fluency initiative. Our teaching style is based on the style of The Carpentries. Learning outcomes Attendees will learn how to: write vanilla markdown, Rmarkdown and bookdown documents use knitr, rmarkdown and bookdown R packages to build various document types including PDF, HTML and DOCX create reproducible Rmarkdown documents leveraging .Rproj and .RData include inline citation and full references list in to Rmarkdown document using .bib files create presentations from Rmarkdown documents that include R code work with git version control tool create reproducible and “backed up” analysis via remote repositories (e.g github) Workshop description This workshop is an introduction to writing and communicating research using Rmarkdown. Rmarkdown is an easy way to create documents that include your R code and its output such figure and tables. Rmarkdown is a single documents that can be “knitted” and shared as various document types such as PDF and HTML. Rmarkdown supports scientific writing such as use of citations and figure cross-referencing. Rmarkdown can also be used to create presentations that include your R code and its output. We will also cover bookdown, which is an extension to Rmarkdown that allows creation of larger documents such as books with multiple chapters. In this workshop we will also cover git version control tool that can help with organising and “checkpointing” Rmarkdown documents, associated R code and data. Git is not a back up system, but it does allow one to retrieve older versions of your work. Git together with remote repositories like GitHub can provide centralised location for your research. All together Rmarkdown, git and github can enable reproducible research that is visiable and accessible by greater public including supervisors and management. Prerequisite This is an introductory level workshop, however some prior exposure to R and familiarity with RStudio is assumed. It is highly recomended that you read this article in full, if you have to prioritise, read at least these section (1,2,6,10). Keywords R Rmarkdown communication reproducibility git and github Schedule 10:00-10:30am (30 minutes) Welcome and warm up 10:30-12:00pm (1.5 hours) Rmarkdown 12:00-1:00pm (1 hour) lunch 1:00-3:00pm (2 hours) More Rmarkdown 3:00-3:15pm (15 minutes) Tea break 3:15-4:45pm (1.5 hours) Even more Rmarkdown 4:45-5:00pm (15 minutes) Warm down Authors and copyright This course is developed for the Monash Bioinformatics Platform by: Paul Harrison Adele Barugahare Kirill Tsyganov This work is licensed under a CC BY-4: Creative Commons Attribution 4.0 International License. The attribution is “Monash Bioinformatics Platform” if copying or modifying these notes. "],
["introduction-to-rmarkdown.html", "1 Introduction to Rmarkdown 1.1 Rmarkdown core parts 1.2 Challenge: Introduction 1 1.3 Rmarkdown ecosystem 1.4 Setup 1.5 Challenge: Introduction 2 1.6 Useful tips", " 1 Introduction to Rmarkdown Rmarkdown has become much more then just embedding R code into a document. It enables construction of very sophisticated document types from plain text files. Rmarkdown file can become pdf documents and a static website at the same time. It can turn your analysis scattered across several different Rmarkdown documents into a single multi-paged books with cross-referencing and citations, let’s call it a thesis or a paper or a course book. And with essentially no effort you can change from “rendering” your Rmarkdown into presentation slides instead of web-page, ready for a conference in little time. Rmarkdown is a natural evolution of vanilla markdown, backed and extended by the Rmrkdown ecosystem discussed shortly. Rmarkdown isn’t the only other flavour of markdown. There are other initiatives such as GitHub Flavored Markdown (GFM) which mainly enhances content appears on github site and CommonMark that tries to unify all the different flavours of markdown syntax, but all will converge to pandoc tool. 1.1 Rmarkdown core parts Any (see Xie, Allaire, and Grolemund 2019) Rmarkdown documents is broken into three main parts: YAML header The R chunks markdown - plain text Those are different parts of the document that all work together to form - render a final document. Each one of those parts can be customised with further options, which will cover later in the book. 1.1.1 YAML header YAML header will always seat at the very top of your Rmarkdown document and it starts and ends with triple dash symbols, ---. Note that YAML is indentation and space sensitive, meaning you need to be rather strict about amount of indentation you use and text strings will need to be quoted. --- title: &quot;Hello world&quot; author: &quot;Kirill&quot; date: &quot;17 June 2019&quot; output: html_document --- 1.1.2 The R chunks These are special parts of the document that hold code that can be executed inline of the Rmarkdown document. R chunks are highly customisable via chunk options. We will spending a lot of time in the course working with code chunks and different options types. ```{r} plot(mtcars) ``` 1.1.3 Everything else is plain old markdown # Have I been Marked Down? 1.2 Challenge: Introduction 1 5 minutes 1. What file extention should we typically use for saving our Rmarkdown files? answer link 2. What document types can be produced (compiled) from Rmarkdown? 3. Will I have to learn more “languges” to use Rmarkdown (discussion question)? The short answer is no. Learning and writing Rmarkdown will take you a very long way. The longer answer is yes. At some point in the future you might want to very sophisticated documents and for that you’ll most certainly will need at least tiny amount of html + css knowledge and maybe some knowledge about LaTeX (I’ve yet to learn a single thing about LaTeX - so far so good :D ) check out this bit of Rmarkdown 1.3 Rmarkdown ecosystem Rmarkdown has relativelly complicated ecosystem. It includes several different R packages. Most of those packages wrap other existing tools, written by different people, thereby providing an “easy” way to interface with the tools via R language. A large part of the ecosystem exists thanks to pandoc tool. 1.3.1 Pandoc Pandoc is a stand alone tool (command line tool) that one can run in the terminal to convert markdown documents to other documents types including html, pdf and MS docs. Since vanilla markdown is pretty simple in what it can produce, pandoc added whole lot of “features”, additional marking tags, that one can use to build more elaborate documents from plain text. 1.3.2 YAML This is stand along language that is used in variety of places, with main advantage to it is that it can be easily ready by humans as well easily parsed by computer. A lot of the time YAML can be used ad a configuration file. This is example how it is used with Rmarkdown. We will talk about YAML in more depth in a different section. In brief we will use YAML to set documents appearance and link additional files with the documents, such as bibliographies. 1.3.3 LaTeX ¯\\_(ツ)_/¯ 1.3.4 Knitr As was mentioned before we are using pandoc to convert markdown to other document types. knitr provides function to convert Rmarkdown files into vanialla markdown, which then in turn can be converted by pandoc into html document for example. Some of the things that knitr does includes R code execution and assembling the results into markdown. 1.3.5 Rmarkdown An rmarkdown R package will convert .Rmd files into other format types. Under the hood it will use pandoc to do so. The main function that we are concerned with is rmarkdown::render() which will call knitr::knit() when required. 1.3.6 Bookdown A bookdown R package enhances rmarkdown by enabling multi-page documents e.g books and easy cross-referencing. 1.3.7 Others These are more R packages that enable more things via Rmarkdown. xaringan blogdown thesisdown 1.4 Setup We will need to install these packages. Let’s install these packages packages &lt;- c(&quot;tidyverse&quot;, &quot;rmarkdown&quot;, &quot;knitr&quot;, &quot;bookdown&quot;, &quot;tinytex&quot;, &quot;citr&quot;) keep &lt;- packages[!(packages %in% installed.packages()[,&quot;Package&quot;])] if(length(keep)) { install.packages(keep) } 1.5 Challenge: Introduction 2 2 minutes 1. Now is a good time to tweak your RStudio to your needs. change font size change themes and backgroung color rearrange panels 2. Please turn off “Restore .RData into workspace at startup” in “Tools -&gt; Global Options”. 1.6 Useful tips don’t attempt to compile to pdf_document until absolutelly necesserary. LaTeX engine that is used by Rmarkdown to pdf conversion known to have issues with aligning figures and tables. This typically causes figures and tables overflow to next pages and general text misalignment. Get your content written first, intermidiate compilation to html_documents are totaly fine, before worrying about technical issues don’t save data into .RData, this will make your work less reproducible "],
["vanilla-markdown.html", "2 Vanilla Markdown 2.1 Vanilla tags 2.2 Practice vanilla markdown 2.3 Challenge: Markdown 1", " 2 Vanilla Markdown The original (vanilla) version of Markdown invented by John Gruber defines a handful of tags, discussed next. Markdown is relativelly small and simple language for writing plain text documents that are easy-to-write and easy-to-read, but it is greatly enhanced and extended by pandoc tool. 2.1 Vanilla tags Let’s open our first Markdown file. File └── New File └── R Markdown title = &quot;Learning Rmarkdown&quot; author = &quot;Me&quot; select document type HTML to build (compile) the document press knitr button or ctrl+alt+k to save as .Rmd file Since we are using RStudio and R it is inevitable that will be using Rmarkdown flaour, but we can still write only vanilla markdown and remember that under the hood Rmarkdown will always be converted to vanilla markdown. From now onward we are going to start using knitr to complie Rmarkdown into html. Remember from the Rmarkdown ecosystem that knitr will convert Rmarkdown to markdonw and rmarkdown R package will convert - render markdown file into html. By pressing that blue button both things will happen automatically and we don’t need to think about, but I wanted you to know that. These are essintially all core (vanilla) markdown tags. Let’s practice writting them. # Header1 ## Header2 ### Header3 Paragraphs are separated by a blank line. Two spaces at the end of a line produces a line break. Text attributes _italic_, **bold**, `monospace`. Horizontal rule: --- Bullet list: * apples * oranges * pears Numbered list: 1. wash 2. rinse 3. repeat A [link](http://example.com). ![Image](Image_icon.png) &gt; Markdown uses email-style &gt; characters for blockquoting. 2.2 Practice vanilla markdown Now it’s just a matter of learning some of the markdown syntax. Let’s delete all current text from the opened document except the YAML header and type this new text in Hello world, I'm learning R markdown ! and pressing the knit HTML button. Hello world, I&#39;m learning R markdown ! Not much happened. This is because we didn’t mark our text in any way. You can put as much text as you want and it will appear as is, unless “specially” marked to look differently. Now add the # symbol at the start of the line and press the knit HTML button again. We’ll be pressing this button a lot! For those who like keyboard short cuts use ctrl+shift+k instead. # Hello world, I&#39;m learning R markdown ! How about now? A single hash symbol made it whole lot bigger didn’t it? We’ve marked this whole line to be the header line. Now make three new lines with the same text, but different numbers of # symbols, one, two and three respectively and keep pressing the Knit HTML button # Hello world, I&#39;m learning R markdown ! ## Hello world, I&#39;m learning R markdown ! ### Hello world, I&#39;m learning R markdown ! This is how you can specify different headers type using markdown. Remember that vanilla markdown is comprised entirely of punctuation characters. 2.3 Challenge: Markdown 1 5 minutes 1. How to mark text so that it appears underlined? answer link 2. Can markdown replace html (discussion question)? It has replaced html and latex in documention and communication of results. My feeling is that data science ecosystem heavily rotates around markdown. But html, pdf and latex in this context are simply communication and sharing medium. On would not want to replace html + css for large website project "],
["rmarkdown-1.html", "3 Rmarkdown 3.1 Embedding R code 3.2 Challenge: Rmarkdown 1 3.3 important blob about include vs results", " 3 Rmarkdown The reason that we are learning Rmarkdown is because it gives us very straight forward way of writing plain text documents with inline R code that will become a very sophisticated document types. The bonus points also come from the fact that Rmarkdown files are easy to version control (git) and see the difference between versions. This approach of interleaving analysis code, commentary and description is very explicit, which has direct implication in reproducibility, shearability and collaboration. In Markdown section I’ve showed you how to start new Rmarkdown document in RStudio, but lets briefly recap how we do that again. File └── New File └── R Markdown title = &quot;Learning Rmarkdown&quot; author = &quot;Me&quot; select document type HTML to build (compile) the document press knitr button or ctrl+alt+k to save as .Rmd file 3.1 Embedding R code RStudio templates .Rmd file for us. However lets delete all the text after the yaml header. --- title: &#39;Learning Rmarkdown&#39; author: &#39;Kirill&#39; date: &#39;21/06/2019&#39; output: html_document --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` I’m going to explain knitr::opts_chunk in later section. An R chunk is a “special” block with in the document that will be read and evaluated by knitr, ultimatelly converting everything into plain markdown. But for us it means that we can focus on our analysis and embed R code without having to worry about it. Additionally there are lage number of chunk options that helps with different aspects of the document including code decoration and evaluation, results and plots rendering and display. This is an R code chunk. ```{r} ``` The little r there specifies the “engine”, basically telling Rmarkdown how to evalute the code inside the chunk. Here we are saying use R engine (language) to evaluate the code. The list of languages is rather long, hence why earlier comments about Rmarkdown spanning much greater area then one might think. In this workshop we are only going to focus on R language. Let’s write our first bit of R code inside the Rmarkdown document. First we need to start a new R chunk, which can be done in either of three ways: simply type it out press insert button at the top of the window ctrl+alt+i Let’s start with a simple print() statement and print Hello world, I'm learning Rmarkdown ! string, except we are going to split it between two variable ```{r} a &lt;- &#39;Hello world, Im learning Rmarkdown !&#39; a ``` Note that each chunk can be run independently in the console by pressing ctrl^enter or little green arrow. Each code chunk is highly customisable via chunk options. We are going to learn a few today, but we won’t be able to cover all of them. You probably never going to use some of them, but as long as you know what to look for you’ll be able to search for then. Note that all chunk options have a default value. Not specifying an options means you are using the default value. These are chunk options that we are going to cover today. name value type description child NULL code_evaluation A character vector of filenames. Knitr will knit the files and place them into the main document. engine ‘R’ code_evaluation Knitr will evaluate the chunk in the named language, e.g. engine = ‘python’. Run names(knitr::knit_engines$get()) to see supported languages. eval TRUE code_evaluation If FALSE, knitr will not run the code in the code chunk. include TRUE code_evaluation If FALSE, knitr will run the chunk but not include the chunk in the final document. fig.align ‘default’ plots How to align graphics in the final document. One of ‘left’, ‘right’, or ‘center’. fig.cap NULL plots A character string to be used as a figure caption in LaTex. fig.height 7 plots The height to use in R for plots created by the chunk (in inches). fig.width 7 plots The width to use in R for plots created by the chunk (in inches). echo TRUE results If FALSE, knitr will not display the code in the code chunk above it’s results in the final document. results ‘markup’ results If ‘hide’, knitr will not display the code’s results in the final document. If ‘hold’,knitr will delay displaying all output pieces until the end of the chunk. If ‘asis’,knitr will pass through results without reformatting them (useful if results return raw HTML,etc.) message TRUE results If FALSE, knitr will not display any messages generated by the code. warning TRUE results If FALSE, knitr will not display any warning messages generated by the code. General layout of any chunk is ```{r chunk_name, options} ``` Note a couple of things, there isn’t a comma between r and chunk_name. Not sure why this is.. Also note that chunk_name is optional, you can skip it, as we have in earlier examples. Naming chunks is good idea to conceptually label the chunk as to what it does, but also we you are going to build more sophisticated documents you’ll be able to selectively include chunks by refer to them by the chunk name. Lets start off with these four chunk options: echo show what has been typed in i.e show the code eval evaluate or execute that code include include execute code into the document, relies on eval = TRUE results hide resulting output These allow us fine level control over the final document. Think about who are generating the document for and what type of information you need to share. Sometimes we might want to show the code, but not execute it and other times we might just want to execute it and share the results, e.g plot, without actually showing the code. 3.1.1 echo and eval Let’s start with echo = TRUE and eval = TRUE. ```{r echo = T, eval = T} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ## [1] &quot;Hello world, Im learning Rmarkdown !&quot; Now let’s turn echo off, echo=FALSE. ```{r echo = F} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` ## [1] &quot;Hello world, Im learning Rmarkdown !&quot; Okay, we don’t see our original print() statement. And now let’s pass eval=FALSE options instead ```{r eval = F} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) 3.1.2 include This option also helps to manipulate your final document look. This option dictates whether the output of the executed code will be included into the final document. Sometimes you can simply trigger eval flag to achive similar result of code now being included, but other times you might way the code to actuall be executed but not included. For example when future R chunk relay on the output of this intermidiate chunk, but there is now need to include that into the document. ```{r echo = T, eval = T, include = F} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` ```{r, echo = T, include = T} ab ``` a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ab ## [1] &quot;Hello world, Im learning Rmarkdown !&quot; 3.1.3 results Now we see the code, but not the output. The difference between echo and results is subtle, at least in my head. Let’s consider the following example. ```{r echo = T, eval = F, results = &#39;asis&#39;} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` ```{r} ab ``` a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ab ## [1] &quot;Hello world, Im learning Rmarkdown !&quot; Let’s turn results = 'hide' ```{r echo = T, eval = F, results = &#39;hide&#39;} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` ```{r} ab ``` a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) [1] “Hello world, Im learning Rmarkdown !” ab ## [1] &quot;Hello world, Im learning Rmarkdown !&quot; And now we only see print() statement and no output. 3.2 Challenge: Rmarkdown 1 3 minutes 1. Go through all of your code so far and give each chunk a name ``` {r chunk_name, options} ``` 3.3 important blob about include vs results Note that if include=FALSE, all of the code, results, and figures will be suppressed. If include=TRUE and results=“hide”, the results will be hidden but figures will still be shown. To hide the figures, use fig.show=“hide”. There are lots of different possible “chunk options”. Each must be real R code, as R will be used to evaluate them. So results=hide is wrong; you need results=“hide”. "],
["git-and-github-introduction.html", "4 Git and GitHub introduction 4.1 Github setup 4.2 RStudio setup 4.3 GitHub things 4.4 More git 4.5 git no nos 4.6 Starting with git 4.7 Which files to commit?", " 4 Git and GitHub introduction When you are rock climbing you want to set your anchors often How often will depend on your experience and desire not to fall Git commit like you are vertically hanging off 70 feet rock I going to break to you right at the start that (unfortunatelly) doing git and GitHub is like rock climbing, but nonetheless it has great benefits for your research and analysis including making it more visiable, reproducible and potentially collaborative. Git is one of many tool, but very popular, that was design for tracking versions of software development - a.k.a version control tool. While it hasn’t been strickly design with scientific research projects in mind we will happily repurpose git to help us stay on top of our research projects. In git world everything rotates around git repository, which is “special” folder. Inside that folder every file and folder is “tracked” for changes. Git repositories often are synonymous with project folder. It is a “bucket” or “container” that holds everything related to a particular project. Figure 4.1: This is an example of git version cotrol vs DIY versioning via filesystem GitHub on the another hand is a place where people can deposit, store and share their git repositories. GitHub also one of many different places that people can choose to use to store and share their git repositories. Image below illustrates some of other common place one can choose to store they git repositories a.k.a projects Figure 4.2: https://www.geekboots.com/story/what-is-the-difference-between-bitbucket-github-and-gitlab For this workshop we are going to go with GitHub, mainly it is very popular and it has a lot of useful features, some of which I’ll share with you later in the workshop. Git and GitHub will help you: organise our directory structure create “milestones” a.k.a git commits make apparent which parts of the projects (files) are important share your work (e.g GitHub) collaborate at the global scale 4.1 Github setup There are a couple of different ways you start a project and initiate git repository - git tracking. We are going to start with GitHub first approach. An alternative approach discussed in appendix section D. I hope that everyone had already created GitHub account. We are going to create a new github repository, which is also automatically a git repository. Remember that GitHub is just a place where we are storing out git repositories and you can only store git repositories on GitHub. Let’s go to GitHub and create new repository and let’s name it “learning_rmarkdown”. Description of the repository is optional, but a good idea to write a brief sentence there to message to yourself and the public what this project is about. Let’s write the following brief sentence; “I’m learning Rmarkdown”. Also note that I ticked “Initialize this repository with a README”. This completely optional. This is the screen you are going to get when you’ve initialised it with a README file And this is a screen you are going to get if you haven’t initialised it with a README file A brief note about README files. It is regarded as a “silent” way of communication, where you can tell all necessary information another person need to know about your project. For a software tool you would put information about how to build that particular tool and dependencies. In our case we will add information how to build final html report. We will do this a bit later in the workshop. Either way is completely fine! Once we have our GitHub repository we need to find a link (URL) and copy a.k.a clone (git clone) our repository to our working computer, in our case rstudio.cloud. We want to establish connection between rstudio.cloud and GitHub such that we can with little effort we can copy our work, that is file from rstudio.cloud to GitHub. This is how typical URL looks like https://github.com/serine/learing_rmarkdown.git There are at least three components in that url https://github.com/ the place i.e the name of the website serine/ username learing_rmarkdown.git repository name (project name) You can get this url, but either looking at the address bar of your browser or there is a little drop down menu on the right hand site. 4.2 RStudio setup Add description about starting a project from a github at RStudio. 4.3 GitHub things PR (pull request) gitissues place to talk about issues related to a project stars acknowledgement watch interested in updates on a projects collaborators and update dates/commits as a proxy of how active the project is. also do check which files typically being changed. Also mention the fact that it is very explicit when the project was started (initiated) how much work has gone into it (commits history) and roughly time frame and intervals of work in simple workflow and collaborations git merge will work just fine. git will happily merge two different branches i.e all files in one location with all files in the other location if no two file conflict 4.4 More git Git is a command line tool however you don’t have to learn command line just yet. There are a few git clients available - graphical user interface (GUI) tool / applications that we can use instead of learning command line. We are going to use RStudio which has good git support and therefore Rstudio will be our git client. One rather important note about git clients, most (all) clients will “simply” form a git commands as you would type it out and execute on command line. This means a couple of things: one can use mixture of clients and command line without any issues. For example if one needs more complicated git command one could run it on the command-line. if you need to do a more complicated git kung fu you might only find solution for command line and then it’ll be up to you to figure out how to work it into your client An interesting note about command line git usage noted in Happy Git with R book; One might think that git via cli is “better”, however it is more important to get the work done and have it version controlled rather then fight with the cli. Do take the simplest and quickest path to get your work version controlled. No one will care which client you are using in the end. 4.5 git no nos no spaces in file names (this goes beyond git) no git repositories inside an existing git repository 4.6 Starting with git In Rstudio you can only start working with git when you have an existing Rproject directory 4.6.1 Configuring git You will most certainly forget this step, because you only need to do it once per computer (or new installation of git). Git will remind if you haven’t done these steps. These are our very first step in being organise and ready for future collaboration. We need to let git know our name and email address, which will get stored in configuration file. Unfortunately RStudio doesn’t have support for setting up config. It was probably not worth implementing given that you only really do it once. We will have to use terminal (command line) just this once. Let’s open up a terminal and run a couple of git commands Tools -&gt; Terminal -&gt; New Terminal git config --global user.name kirill git config --global user.name &quot;kirill.tsyganov@monash.edu&quot; One can then double check that all was set correctly bu running this command. git config --global --list 4.6.2 Intiating git repository In git jargon repository is simply your working folder (folders sometimes also called directories). In our case Rproject folder == Rproject directory == git repository == git repo Let’s initate git repository Tools -&gt; Version Control -&gt; Project Setup -&gt; Git/SVN And select from the drop down options “Version control system” Git The command line equivalent is navigating to your project directory and running git init 4.6.3 First commit Let’s make our first commit, use drop down menu as indicated on the image below to select commit option You should see a new window poped up Then we are going to add three files .gitignore project.Rproj learning_markdown.Rmd Write a commit message and press commit. And this is how happy git commit looks like The commit message is rather important. Remember that commit message is: a message to a future you a message to your supervisor a message to all other external people Those commit messages are means of communications e.g “fixed figure 1 legend” “added new paragraph to chapter 1” “I bloody hate this project delete everything, starting from scratch” Good thing is, as long as you “tracking” your deletes you can always go back to them and check what you have deleted and revert some of those changes back when needed. However in this workshop we won’t be covering much of that. Also note that commit message don’t have to long, and can be as short as one work - “update2”, but at the same time well written commit message will help you and other. http://r-pkgs.had.co.nz/git.html#commit-best-practices 4.7 Which files to commit? This section will be extended in the future release, but I highly recommend reading this article, specifically section 10: Which files to commit from here "],
["more-rmarkdown.html", "5 More Rmarkdown 5.1 Setup 5.2 Exploring the data 5.3 Including external files 5.4 Challenge: More Rmarkdown 1 5.5 Visualising the data 5.6 Challenge: More Rmarkdown 2 5.7 More plots 5.8 More chunk options", " 5 More Rmarkdown We are going to inrease the difficulty a little bit and we are going to start working towards our final documnet. Typically you will have some data set that you are trying to analyse and later present. There are likely to be some other prior steps before you get your tabular data. Those prior steps should also be documented. In this workshop we are going to start with a tabular data set straight away. We are going use Domestic Airlines - On Time Performance data set from data.gov.au 5.1 Setup First thing first is we need to download data. read_csv() function from readr package can “read” directly from url, but we are going to “cache” a file first and then we are going to reference our local copy. This will shorten our final html building time. We should also check licence on the data set, especially if you are going to publish some of your analysis. This data is Creative Commons Attribution 3.0 Australia licence, there is no problem in downloading and using the data. Let’s open new Rmarkdown file and delete everything from it except the yaml header. 5.1.1 Setting global chunk options As you have learned already you can manipulate each R chunk with options, but you can also set global settings for each chunk. Let’s set echo = TRUE and message = FALSE globally. This means every R chunk will be echoed i.e shown in the final document and no messages will appear anywhere in the document. options(encoding=&quot;utf-8&quot;) knitr::opts_chunk$set(echo = TRUE, message = FALSE) 5.1.2 Loading libraries We are going to do our analysis with the help of tidyverse library, let’s load it in. library(tidyverse) 5.1.3 Downloading the data We are doing conditional download, so that we don’t need re-download every time we build a document. fn_data &lt;- &quot;domestic_airline_performance.csv&quot; fn_notes &lt;- &quot;domestic_airline_performance_notes.txt&quot; if(!file.exists(fn_data)) { url_data &lt;- &quot;https://data.gov.au/data/dataset/29128ebd-dbaa-4ff5-8b86-d9f30de56452/resource/cf663ed1-0c5e-497f-aea9-e74bfda9cf44/download/otp_time_series_web.csv&quot; url_notes &lt;- &quot;https://data.gov.au/data/dataset/29128ebd-dbaa-4ff5-8b86-d9f30de56452/resource/69e214b9-b66f-4636-9c84-3efda2d0d8ae/download/otptimeserieswebnotes.txt&quot; download.file(url_data, fn_data) download.file(url_notes, fn_notes) } df &lt;- read_csv(fn_data, quote = &quot;&quot;) df 5.2 Exploring the data Let’s explore our data set. It is always helpful to get more information about the data set, good to start with getting dimensions of the data.frame, i.e number of rows and columns. Let’s include the following bit of come into our Rmarkdown document. Note that instead of executing and showing the code we are stroing results in a variable d, and for that we are using echo = FALSE chunk option. ```{r echo = F} d &lt;- df %&gt;% dim ``` Later in the text we will be able to access variable as you would in R `r d[1]` Lets add the following sentence to our Rmarkdown document and then knit to see the results. total number of observation `r d[1]` and total number of variables `r d[2]` Now we are going to find out names of all airlines presented in the data set and number of observation for each airline. In this case we are not interested in showing actual code, so we are going to hide it with echo = FALSE once again. ```{r echo = F} df %&gt;% group_by(Airline) %&gt;% summarise(n = n()) %&gt;% arrange(-n) ``` I hope you have noticed “All Airlines” name in the Airline column. I am not fairly with such airlines. This is likely some summary field that we don’t know about. In the real life you should consult people who has generated the data set, but in our case we are simply going to filter those observations out. Once again we are hiding the results from the final document, by setting eval = TRUE to make sure that the code runs since we will need df2 later in the document. ```{r echo = F, eval = T} df2 &lt;- df %&gt;% filter(Airline != &#39;All Airlines&#39;) ``` 5.3 Including external files child chunk option allows us to include external files into our document You have probably noticed that we have downloaded two files, the data set and the notes about the dat set. I didn’t want to spend time going over those notes, but let’s include them into our Rmarkdown document for future references. Let’s add the following text to out document ### Additional information about the data set ```{r child = &#39;domestic_airline_performance_notes.txt&#39;} ``` *** 5.4 Challenge: More Rmarkdown 1 5 minutes 1. Can you summarise routes in similar way as we did with airlines? use group_by(Route) 2. Can spot an odd route in you summary? If you can filter is our from df2. filter(Route != \"All Ports-All Ports\") 5.5 Visualising the data Our document looks pretty good so far, let’s add some visualisation to our document, with that will be covering these chunk options the following chunk options, all to do with figures manipulation. fig.align - left, right, center or default (left) fig.height - height specified in inches fig.width - width specified in inches fig.cap - string of text in quotes Firstly lets make sure we have our data properly filtered. We are going to filter out All Ports-All ports routes, since this is similar to All airlines field and likely to be some summary field that we are not interested in. We also going to only look at two airlines, Jetstar and Qantas, due to time constrains. Here we don’t need to set any particular chunk options because I think it would be informative to show our filtering and we actually need that code to be run. ```{r} df2 &lt;- df %&gt;% filter(Airline == &#39;Jetstar&#39; | Airline == &#39;Qantas&#39;) Route != &#39;All Ports-All Ports&#39;) ``` Here we are summarising our data so that we have an idea of how many times a particular location had be used by our airlines per year. Let’s include that bit code into our Rmarkdown document and once again let’s hide our code from the document by setting echo = FALSE ```{r echo = FALSE} df2 %&gt;% group_by(Airline, Year, Departing_Port) %&gt;% summarise(n = n()) %&gt;% ungroup %&gt;% ggplot(aes(Departing_Port, n, color = Airline)) + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1)) ``` Let’s experiment with setting different dimensions to our figure. Lets set both height and width to 4. Remember that units for height and width are in inches. ```{r echo = FALSE, fig.height = 4, fig.width = 4} df2 %&gt;% group_by(Airline, Year, Departing_Port) %&gt;% summarise(n = n()) %&gt;% ungroup %&gt;% ggplot(aes(Departing_Port, n, color = Airline)) + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1)) ``` Now let’s try to align our figure to the center by setting fig.align = 'center' and re-build our document. Let’s experiment with setting wight to 15 and height to 9. At some point though we are going to start hitting the physical limit of the html page. 5.6 Challenge: More Rmarkdown 2 5 minutes 1. Can you align figure to the right?? fig.align = 'right' 2. Align figure to the center and add figure legend using fit.cap chunk option fig.align = 'center', fig.cap = 'Figure 1: blah' 3. Can you add some emphasis to figure legend, e.g make important parts bold or underlined? Remember that figure legend is just a string of text and any text can be marked 5.7 More plots Let’s attempt to see what is the distribution of cancellation in any given year Note the warning message that comes up in the text, let’s assume we understand it and let’s just turn it off by setting warning = F ```{r, fig.width = 14, fig.height = 9} df2 %&gt;% filter(Airline == &#39;Jetstar&#39; | Airline == &#39;Qantas&#39;) %&gt;% select(Airline, Departing_Port, Cancellations, Year) %&gt;% ggplot(aes(Departing_Port, Cancellations, color = factor(Year))) + geom_boxplot() + facet_wrap(~Airline) + theme(axis.text.x=element_text(angle= 45, hjust=1)) ``` 5.8 More chunk options I’m going to share a couple of more code chunks, these are mainly cosmetic, some of you may never use them. prompt=FALSE i.e mimic consosle comment= remove hash symbol at the front of the output For this example I’m going to use simple for loop. We are going to use this variable sentence &lt;- c(\"Let\", \"the\", \"computer\", \"do\", \"the\", \"work\") ```{r} sentence &lt;- c(&#39;Let&#39;, &#39;the&#39;, &#39;computer&#39;, &#39;do&#39;, &#39;the&#39;, &#39;work&#39;) for(word in sentence){ print(word) } ``` sentence &lt;- c(&quot;Let&quot;, &quot;the&quot;, &quot;computer&quot;, &quot;do&quot;, &quot;the&quot;, &quot;work&quot;) for(word in sentence){ print(word) } ## [1] &quot;Let&quot; ## [1] &quot;the&quot; ## [1] &quot;computer&quot; ## [1] &quot;do&quot; ## [1] &quot;the&quot; ## [1] &quot;work&quot; Let’s add prompt=TRUE &gt; sentence &lt;- c(&quot;Let&quot;, &quot;the&quot;, &quot;computer&quot;, &quot;do&quot;, &quot;the&quot;, &quot;work&quot;) &gt; &gt; for(word in sentence){ + print(word) + } ## [1] &quot;Let&quot; ## [1] &quot;the&quot; ## [1] &quot;computer&quot; ## [1] &quot;do&quot; ## [1] &quot;the&quot; ## [1] &quot;work&quot; "],
["yaml-introduction.html", "6 YAML introduction 6.1 YAML header 6.2 Challenge: YAML 1 6.3 General yaml header 6.4 Challenge: YAML 2 6.5 Rmarkdown yaml header 6.6 Rmarkdown rendering 6.7 Challenge: YAML 3 6.8 More Rmarkdown tags 6.9 Presentation slides", " 6 YAML introduction As it was mentioned earlier in the book yaml is a stand along language, often it is used as a configuration file, which is true in the case of Rmarkdown. We are going to use it in conjunction with Rmarkdown documents by embeding yaml blob into Rmarkdown files, just like we did with R chunks. YAML blob, or in the context of Rmarkdown YAML header, must be at the very top of your Rmarkdown file. The yaml header enable high degree of customisation for our final documents. We can also use yaml header to “attach” or reference other external files such as bibliographies and styling in the form of css. For the purpose of configuring Rmarkdown documents you need to know three variable types: scalar stand along value e.g 3 or “car” list a collection of items e.g [“learing”, “to”, “use” “yaml”] map a different collection type that can hold simple types. e.g rmd_files: [“00-index.Rmd”, “01-introduction.Rmd”] 6.1 YAML header YAML is relativelly similar to another file format JSON, if you are familiar with one you should have little problem wrapping your head around the other. Fundamentally both file types trying to provide structured relationship between items via key = value pairing. Keys sometimes interchangeably used with tags. Remember that yaml language, unlike json, is very sensetive to spaces and indentations. Below are some examples of valid and invalid yaml syntax. 6.1.1 Example 1 This is a valid yaml header. In this exapmle we have a key title with scalar value Learning Rmarkdown --- title: &quot;Learning Rmarkdown&quot; --- 6.1.2 Example 2 This is also valid YAML header. Here we have rmd_files key that has as it’s value a list of items. In yaml there is two ways one can specify a list. --- rmd_files: - 00-index.Rmd - 01-introduction.Rmd --- And This is an alternative way to specify a list. --- rmd_files: [&quot;00-index.Rmd&quot;, &quot;01-introduction.Rmd&quot;} --- 6.1.3 Example 3 This on the other hand isn’t valid YAML header --- rmd_files: 00-index.Rmd 01-introduction.Rmd --- 6.2 Challenge: YAML 1 5 minutes 1. Is this a valid YAML header? ---- title: &quot;Hello world!&quot; author: Me! --- Yes, everything looks good to me 2. What about this YAML header? ---- title: &quot;Hello world!&quot; author: Me! bookdown::gitbook: config: toc: collapse: subsection --- Yes, this is highly neted, but still a completely valid yaml header 3. How do you get a list of all possible keys and values (discussion question) ? Read the docs (will need to expand this answer) 6.3 General yaml header This handful of tags are general between different document types. Most other key, values are aimed at the specific document type. In the next few sections we will look at yamls keys specific for Rmarkdown, bookdown and pdf final files configuration. --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; --- 6.4 Challenge: YAML 2 5 minutes 3. Is this a valid yaml? --- date: 21 July, 2019 --- It is certainly valid by Rmarkdown standards, but it may not be in other systems 6.5 Rmarkdown yaml header Here we are starting to see another new key output with a value html_document --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: html_document --- These are some of the possible values that output can take html_notebook Interactive R Notebooks html_document HTML document w/ Bootstrap CSS pdf_document PDF document (via LaTeX template) word_document Microsoft Word document (docx) odt_document OpenDocument Text document rtf_document Rich Text Format document md_document Markdown document (various flavors) Turns out that each one of those values is a also a key that can take other values. --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: html_document: toc: true toc_depth: 3 number_sections: yes --- Note that indentation is very important here as it reflects the relationship between key value pairs. 6.6 Rmarkdown rendering As we have discussed in the introduction Rmarkdown is an abmigious word. It could mean an rmarkdown R package that converts or renders markdown into various document types. We can also be refering to an Rmarkdown document that we are writing. And we also could also use it in a more generic sence refering to the ecosystem. Here I’m going to specifically talk about Rmarkdown R package and the render function i.e rmarkdown::render(). render can take an option for output format. You can either specify the output format by directly giving it a function i.e rmarkdown::render(output_format = &quot;html_document&quot;) Or pass that same information via yaml header. As you might have noted above, html_document itself has a bunch of options. There would be a way to pass them manually in R console, but it is much nice and more reproducible to pass them via yaml header. The two way to figure out which options are available for html_document is to either google (an obvious one) or take a look at the help page for that function i.e ?rmarkdown::html_document 6.7 Challenge: YAML 3 5 minutes 1. Can you find in the help page which values df_print from html_document can take? run ?rmarkdown::html_document in Rstudio console to open help page and search for df_print 2. Set df_print to a value that will give you paginated HTML table. paged 6.8 More Rmarkdown tags Let’s add more options to our yaml file and knit it and see what has changed. --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: html_document: df_print: paged toc: true toc_float: true toc_collapsed: true toc_depth: 3 number_sections: false code_folding: &quot;hide&quot; theme: sandstone highlight: espresso --- As I have eluted earlier if you simply change output: html_document to output: pdf_document you are going to get pdf document instead. Also remember that all of those options that we gave to html_document are specific to that document type only, although some tags might have the same name in other document types e.g toc and toc_depth keys also exist in pdf_document. We are not going to spend time on building a pdf document. It is a more finicky to build because it relying on LaTeX engine and LaTeX can be very finicky. This is more relevant for more complex documents. This is why we recommend to firstly build html document and only once you have finished you analysis and start building your pdf documents. The more interesting, in my view, document type is ioslides_presentation 6.9 Presentation slides As I’ve mentioned in previous section, output has many options, one of which is ioslides_presentation. Let’s comment html_document with all it’s options out for now, add output: ioslides_presentation and re-compile out document --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: ioslides_presentation #output: # html_document: # df_print: paged # toc: true # toc_float: true # toc_collapsed: true # toc_depth: 3 # number_sections: false # code_folding: &quot;hide&quot; # theme: sandstone # highlight: espresso --- As you might have guessed ## symbol in the case of ioslides_presentation means the beginning of the slide. While amount of work is minimal to convert between html_document and ioslides_presentation you will obviously need to reduce amount of text. "],
["bibliographies.html", "7 Bibliographies 7.1 Challenge: Bibliographies 1 7.2 Where do you get bibtex file? 7.3 Challenge: Bibliographies 2 7.4 More about .bib and Rmarkdown 7.5 Citing R packages 7.6 Challenge: Bibliographies 3", " 7 Bibliographies We have already talked about yaml files format being a plain text and structured file format. I’ve also mentioned json in passing, as being abother plain text and structured file format. One of the main purposed for having structure is so that computer can understand (parse) the information. bibtex is yet another plain text, but structured file format, often times referred to as bibliographical database file. Bibtex originated in 1985, here is an interview with the author, Oren Patashnik, of bibtex if you interested to know how it came to be. Whereas both yaml and json originated start of 2000’s, 15 years later. The reason I am mentioning the dates is because in theory any one of those other formats, yaml or json, could have been easily re-purposed for citations. For example Citation File Format (CFF) is in fact, exactly that, yaml based, citation format. There are many different citation file formats (10-20). Rmarkdown once again leverages an external tool pandoc-citepro to generate and embed citation. pandoc-citepro can work with several different file formats including bibtex, RIS and EndNote. Hopefully this gives you a bit of an overview what is possible and available regarding citations. In this workshop we are going to use bibtex file format only. Note that very common file extension for bibtex is .bib and this is the one we are going to use. Let’s have a look at a typical .bib file content, the one shown below has two citation entries. @Manual{R-base, title = {R: A Language and Environment for Statistical Computing}, author = {{R Core Team}}, organization = {R Foundation for Statistical Computing}, address = {Vienna, Austria}, year = {2017}, url = {https://www.R-project.org/}, } @book{xie_allaire_grolemund_2019, place={Boca Raton}, title={R Markdown: the definitive guide}, publisher={CRC Press, Taylor &amp; Francis Group}, author={Xie, Yihui and Allaire, J. J. and Grolemund, Garrett}, year={2019} } There are three core parts to any citation in the .bib file: type of the citation. Type begins with an @ sign key used in our document to include citation. First item inside curly brackets field provide information about the thing that you are citing. Fields are key, value pairs One thing to note about .bib file it is case-insensitive i.e book, Book and BOOK have the same meaning and effect. 7.1 Challenge: Bibliographies 1 5 minutes 1. Can you identify types of references shown in above? There are two citation with two different types manual and book 2. Can you identify keys for the references shown above? There are two citation with two unique key each, R-base and xie_allaire_grolemund_2019 3. Can you identify at least two different fields in any of the citations? Everything that has an equals sign is a fields. 7.2 Where do you get bibtex file? There are two ways to get .bib files: manually curate one: remember that this is a plain text file format, so you can just type it out in a text editor and save as .bib file export out of your citation management or the publication website I tried a couple of website, pubmed and nature.com, neither of those appear to allow you to export .bib. Pubmed exports .nbib, which is a different file format if you look inside. Nature exports .ris, again not the one that we want. Google scholar has a button import into Bibtext that will give the correct citation. As I’ve mentioned above all of those file formats are actually supported the only problem is figuring out which “key” you can use to include your citation into the document. And there isn’t much resource out there to help you with other bibliography file formats. For now I would say the best and easiest option is to stick with .bib format. Let’s practice including citation into our Rmarkdown document. This is the paper that we are going to cite Excuse me, do you have a moment to talk about version control?. Go to this URL https://peerj.com/preprints/3159/, look for “Download” button on the right hand site, from the drop down select “BibTex”. This will download citation file. On my computer the file name was peerj-preprints-3159.bib. If you are curious to take a pick at the file content on your local computer, you can open such file with a text editor. Do not attempt to open with any other programs, such ash MS word or citation management tools. Most likely your computer will want to do just that, do not succumb! Mac people can use “TextMate” and windows people can use “Notepad” text editors. But this isn’t necessary. One you have .bib file, let’s upload it into rstudio.cloud. Navigate to your “Files” panel, there you should see “Upload” button. Use that menu to upload your .bib file onto rstudio.cloud. You should see .bib file in your file browser if you are successful. If you double click on that file it should open up in a different panel, text editor panel, and you should see the content of that file as shown below. @article{10.7287/peerj.preprints.3159v2, title = {Excuse me, do you have a moment to talk about version control?}, author = {Bryan, Jennifer}, year = 2017, month = aug, keywords = {Git, GitHub, workflow, data science, R Markdown, reproducibility, R language}, abstract = { Data analysis, statistical research, and teaching statistics have at least one thing in common: these activities all produce many files! There are data files, source code, figures, tables, prepared reports, and much more. Most of these files evolve over the course of a project and often need to be shared with others, for reading or edits, as a project unfolds. Without explicit and structured management, project organization can easily descend into chaos, taking time away from the primary work and reducing the quality of the final product. This unhappy result can be avoided by repurposing tools and workflows from the software development world, namely, distributed version control. This article describes the use of the version control system Git and and the hosting site GitHub for statistical and data scientific workflows. Special attention is given to projects that use the statistical language R and, optionally, R Markdown documents. Supplementary materials include an annotated set of links to step-by-step tutorials, real world examples, and other useful learning resources. }, volume = 5, pages = {e3159v2}, journal = {PeerJ Preprints}, issn = {2167-9843}, url = {https://doi.org/10.7287/peerj.preprints.3159v2}, doi = {10.7287/peerj.preprints.3159v2} } I hope every can identify “key” for this citation - 10.7287/peerj.preprints.3159v2. To me this is very annoying key to use since it is not very memorable and hard to type. Let’s edit this file in place and change that key to Bryan2017. Remember that key has to be unique per .bib file, but they can be any text. Make sure you save your changes (ctrl^S) and you can close this file now. Let’s include a reference to this .bib file in our Rmarkdown document via yaml header, using bibliography key. --- bibliography: &quot;peerj-preprints-3159.bib&quot; --- Now let’s use our article key to cite in the text [@Bryan2017] and re-compile our html document. 7.3 Challenge: Bibliographies 2 5 minutes 1. Go to google scholar and search for that same article Excuse me, do you have a moment to talk about version control?, find and export .bib citation and include it into our Rmarkdown document. Relatively hard task since I haven’t explained how to include multiple .bib files into yaml header. 2. If you are manually curating .bib file, how do you know which types and fields are allowed? This resource can be useful 7.4 More about .bib and Rmarkdown As was mentioned above one can append multiple references into a single .bib file or you can provide a list of .bib file --- bibliography: [&quot;peerj-preprints-3159.bib&quot;, &quot;another_reference.bib&quot;] --- OR --- bibliography: - &quot;peerj-preprints-3159.bib&quot; - &quot;another_reference.bib&quot; --- If you want to reference multiple articles in the text each key should be separated by a semicolon (;) [@Bryan2017; @bryan2018excuse] You can include any text inside square brackets [see @Bryan2017 p 12; also this ref @bryan2018excuse] If you would like to suppress author’s name you can use minus sign [-@Bryan2017; -@bryan2018excuse] You can also enable hyperlinking of the citation to the corresponding entry in the references as follows --- link-citations: true --- 7.5 Citing R packages R provides convenient citation() function that one can use to cite R packages e.g citation(&quot;ggplot2&quot;) 7.6 Challenge: Bibliographies 3 2 minutes 1. Can you get .bib citation for bookdown package? You don’t get .bib text content right away, but if you are careful at reading the message you will understand that you need to do this citation(&quot;bookdown&quot;) %&gt;% print(bibtex = TRUE) "],
["bookdown-1.html", "8 Bookdown 8.1 work in progress 8.2 Cross-references 8.3 check", " 8 Bookdown ¯\\_(ツ)_/¯ All .Rmd files located in the same directory will be compiled into the book in the (alphabetical?) order. files that start with an underscore are skipped if there is an index.Rmd it will always be treated as a first file those settings can be overwritten via _bookdown.yml _bookdown.yml must co-exist with .Rmd files in the “book” directory Bookdown has extended markdown even further for math https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html#tab:theorem-envs 8.1 work in progress Besides these html_document() options, gitbook() has three other arguments: split_by argument specifies how you want to split the HTML output into multiple pages rmd: use the base filenames of the input Rmd files to create the HTML filenames, e.g., generate chapter3.html for chapter3.Rmd. none: do not split the HTML file (the book will be a single HTML file). chapter: split the file by the first-level headers. section: split the file by the second-level headers. chapter+number and section+number: similar to chapter and section, but the files will be numbered. split_bib config collapse section subsection scroll_highlight: yes before: null 8.2 Cross-references A normal paragraph. plot(cars) # a scatterplot Figure 8.1: A scatterplot of the data cars using base R graphics. 8.3 check need to address difference between html_document2 vs gitbook https://bookdown.org/yihui/rmarkdown/bookdown-output.html#bookdown-output "],
["miscellaneous.html", "9 Miscellaneous 9.1 YAML 9.2 LaTeX 9.3 Tabbed sections 9.4 Figure options via yaml 9.5 tables Rmarkdown", " 9 Miscellaneous In general think about fast turn around time and easi of editing. this will remove numbering from that header # Preface {-} 9.1 YAML WE are using yaml language define certain parameters that meant to do to different tools some are designated for pandoc other for bookdown package other general rmarkdown/knitr settings 9.2 LaTeX \\[f(k) = {n \\choose k} p^{k} (1-p)^{n-k}\\] \\[\\begin{array}{ccc} x_{11} &amp; x_{12} &amp; x_{13}\\\\ x_{21} &amp; x_{22} &amp; x_{23} \\end{array}\\] \\[X = \\begin{bmatrix}1 &amp; x_{1}\\\\ 1 &amp; x_{2}\\\\ 1 &amp; x_{3} \\end{bmatrix}\\] 9.3 Tabbed sections ## Quarterly Results {.tabset} ### By Product (tab content) ### By Region (tab content) ## Quarterly Results {.tabset .tabset-fade .tabset-pills} 9.4 Figure options via yaml This sounds interesting ok, I’ve tested out and fig_height and width via yaml do the same thing as when passed through chunk options. I guess yaml allows global defition, although one can set chunk options globally too.. also need to cover out.width = \"70%\" pretty good resource about image resizing https://sebastiansauer.github.io/figure_sizing_knitr/ 9.5 tables Rmarkdown can’t really describe at this stage where this is come from. it appears that it has links with pagedown and paged.js library paged max.print The number of rows to print. rows.print The number of rows to display. cols.print The number of columns to display. cols.min.print The minimum number of columns to display. pages.print The number of pages to display under page navigation. paged.print When set to FALSE turns off paged tables. rownames.print When set to FALSE turns off row names. "],
["references.html", "References", " References Xie, Yihui, J. J. Allaire, and Garrett Grolemund. 2019. R Markdown: The Definitive Guide. CRC Press, Taylor &amp; Francis Group. "],
["appendix.html", "A Appendix A.1 Long list of chunk options A.2 Citation", " A Appendix A.1 Long list of chunk options name value type description child NULL code_evaluation A character vector of filenames. Knitr will knit the files and place them into the main document. code NULL code_evaluation Set to R code. Knitr will replace the code in the chunk with the code in the code option. engine ‘R’ code_evaluation Knitr will evaluate the chunk in the named language, e.g. engine = ‘python’. Run names(knitr::knit_engines$get()) to see supported languages. echo TRUE results If FALSE, knitr will not display the code in the code chunk above it’s results in the final document. eval TRUE code_evaluation If FALSE, knitr will not run the code in the code chunk. include TRUE code_evaluation If FALSE, knitr will run the chunk but not include the chunk in the final document. purl TRUE code_evaluation If FALSE, knitr will not include the chunk when running purl() to extract the source code. collapse FALSE results If TRUE, knitr will collapse all the source and output blocks created by the chunk into a single block. results ‘markup’ results If ‘hide’, knitr will not display the code’s results in the final document. If ‘hold’,knitr will delay displaying all output pieces until the end of the chunk. If ‘asis’,knitr will pass through results without reformatting them (useful if results return raw HTML,etc.) error TRUE results If FALSE, knitr will not display any error messages generated by the code. message TRUE results If FALSE, knitr will not display any messages generated by the code. warning TRUE results If FALSE, knitr will not display any warning messages generated by the code. comment ‘##’ code_decoration A character string. Knitr will append the string to the start of each line of results in the final document. highlight TRUE code_decoration If TRUE, knitr will highlight the source code in the final output. prompt FALSE code_decoration If TRUE, knitr will add &gt; to the start of each line of code displayed in the final document. strip.white TRUE code_decoration If TRUE, knitr will remove white spaces that appear at the beginning or end of a code chunk. tidy FALSE code_decoration If TRUE, knitr will tidy code chunks for display with the tidy_source() function in the formatR package. opts.label NULL chunks The label of options set in knitr:: opts_template() to use with the chunk. R.options NULL chunks Local R options to use with the chunk. Options are set with options() at start of chunk. Defaults are restored at end. ref.label NULL chunks A character vector of labels of the chunks from which the code of the current chunk is inherited. autodep FALSE cache If TRUE, knitr will attempt to figure out dependencies between chunks automatically by analyzing object names. cache FALSE cache If TRUE, knitr will cache the results to reuse in future knits. Knitr will reuse the results until the code chunk is altered. cache.comments NULL cache If FALSE, knitr will not rerun the chunk if only a code comment has changed. cache.lazy TRUE cache If TRUE, knitr will use lazyload() to load objects in chunk. If FALSE, knitr will use load() to load objects in chunk. cache.path ‘cache/’ cache cache.vars NULL A character vector of object names to cache if you do not wish to cache each object in the chunk. dependson NULL cache A character vector of chunk labels to s dev ‘png’ plots The R function name that will be used as a graphical device to record plots, e.g. dev=‘CairoPDF’. dev.args NULL plots Arguments to be passed to the device, e.g. dev.args=list(bg=‘yellow’, pointsize=10). dpi 72 plots A number for knitr to use as the dots per inch (dpi) in graphics (when applicable). external TRUE plots If TRUE, knitr will externalize tikz graphics to save LaTex compilation time (only for the tikzDevice::tikz() device). fig.align ‘default’ plots How to align graphics in the final document. One of ‘left’, ‘right’, or ‘center’. fig.cap NULL plots A character string to be used as a figure caption in LaTex. fig.env ‘figure’ plots The Latex environment for figures. fig.ext NULL plots The file extension for figure output, e.g. fig.ext=‘png’. fig.height 7 plots The height to use in R for plots created by the chunk (in inches). fig.width 7 plots The width to use in R for plots created by the chunk (in inches). fig.keep ‘high’ plots If ‘high’, knitr will merge low-level changes into high level plots. If ‘all’, knitr will keep all plots (low-level changes may produce new plots). If ‘first’, knitr will keep the first plot only. If ‘last’, knitr will keep the last plot only. If ‘none’, knitr will discard all plots. fig.lp ‘fig:’ plots A prefix to be used for figure labels in latex. fig.path figure/’ plots fig.pos ’’ fig.process NULL fig.retina 1 fig.scap NULL A character string to be used as a short figure caption. fig.subcap NULL plots A character string to be used as captions in sub-figures in LaTex. fig.show ‘asis’ plots If ‘hide’, knitr will generate the plots created in the chunk, but not include them in the final document. If ‘hold’, knitr will delay displaying the plots created by the chunk until the end of the chunk. If ‘animate’, knitr will combine all of the plots created by the chunk into an animation. fig.showtext NULL plots If TRUE, knitr will call showtext::showtext.begin() before drawing plots. out.extra NULL plots A character string of extra options for figures to be passed to LaTex or HTML. out.height NULL plots The height and height to scale plots to in the final output. Can be in units recognized by output, e.g. 8\\linewidth, 50px out.width NULL plots The width and height to scale plots to in the final output. Can be in units recognized by output, e.g. 8\\linewidth, 50px resize.height NULL plots The height and height to resize tike graphics in LaTex, passed to . resize.width NULL plots The width and height to resize tike graphics in LaTex, passed to . sanitize FALSE plots If TRUE, knitr will sanitize tike graphics for LaTex. A.2 Citation A.2.1 Yaml header You can also include citation into yaml header e.g references: - id: fenner2012a title: One-click science marketing author: - family: Fenner given: Martin container-title: Nature Materials volume: 11 URL: &#39;http://dx.doi.org/10.1038/nmat3283&#39; DOI: 10.1038/nmat3283 issue: 4 publisher: Nature Publishing Group page: 261-263 type: article-journal issued: year: 2012 month: 3 While this is handy for one or two citation, but this isn’t practical for a study that has more then a few citations. A.2.2 Changing citation style Apparently if you go here and download individual .csl files, specific for your citation style you then should be able to reference that file in yaml header --- csl: &quot;harvard-anglia-ruskin-university.csl&quot; --- OR --- citation-style: &quot;harvard-anglia-ruskin-university.csl&quot; --- This is explained here However I wasn’t able to change my style. I suspect there are some subtleties between bookdown and rmarkdown specifically html_docment and html_docment2 outputs Here meant to be the solution by using --- pandoc_args: [--csl=../supplementary2/harvard-anglia-ruskin-university.csl] --- But that also didn’t work for me. Also note that biblio-style “only applied to LaTeX output. For other output formats, you need to use the csl option in YAML or –csl in pandoc_args:” --- biblio-style: apalike --- A.2.3 BibTex This is a good resource for manual bibtex curation. "]
]
